{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/martinraba/Desktop/chat-app/src/chat/chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport { useParams } from 'react-router-dom';\nimport './Chat.css';\nimport Axios from 'axios';\nconst ENDPOINT = \"http://localhost:8080\";\nlet socket;\nexport default function Chat(props) {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [recentMessages, setRecentMessages] = useState([]);\n  const [user_name, setUsername] = useState('');\n  const [room_Id, setRoomId] = useState('');\n  const user = props.location.state.userName;\n  const room = props.location.state.room;\n  const roomName = useParams().name;\n  console.log(roomName);\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    setUsername(user);\n    socket.emit('join', {\n      user_name,\n      roomName\n    });\n  }, [user, user_name, room, roomName]);\n  useEffect(() => {\n    if (roomName) {\n      Axios.get(`http://localhost:8080/user/${roomName}`).then(res => {\n        if (res) {\n          console.log(res);\n          setRoomId(res.data.existingUser._id); //let roomId = res.data.existingUser._id;\n          //setRoomId(roomId)\n        }\n      });\n    }\n  }, [roomName]);\n  useEffect(() => {\n    socket.on('mostRecentMessages', data => {\n      setRecentMessages(data.messages);\n    });\n  }, [recentMessages]);\n  useEffect(() => {\n    socket.on('newChatMessage', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n  }, []);\n  console.log(room_Id);\n\n  const handleChatInput = event => {\n    event.persist();\n    setMessage({\n      [event.target.name]: event.target.value,\n      username: user_name,\n      roomId: room_Id\n    });\n  };\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('send-message', message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-show-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages-show-list\",\n          id: \"message-list\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages-show-list\",\n          id: \"message-list\",\n          children: messages && messages.map(msg => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [msg.user_name, \" :  \", msg.message_text, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-create-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"message\",\n          onChange: handleChatInput,\n          className: \"chat-messages-create-input\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"chat-messages-create-button\",\n          onClick: e => sendMessage(e),\n          children: \" Send \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"mCZl7DpebB3+mqnjhIHbGHYlMtY=\", false, function () {\n  return [useParams];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/martinraba/Desktop/chat-app/src/chat/chat/Chat.js"],"names":["React","useState","useEffect","io","useParams","Axios","ENDPOINT","socket","Chat","props","message","setMessage","messages","setMessages","recentMessages","setRecentMessages","user_name","setUsername","room_Id","setRoomId","user","location","state","userName","room","roomName","name","console","log","emit","get","then","res","data","existingUser","_id","on","prevMessages","handleChatInput","event","persist","target","value","username","roomId","sendMessage","preventDefault","map","msg","message_text","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\nimport {useParams} from 'react-router-dom';\nimport './Chat.css';\nimport Axios from 'axios';\n\nconst ENDPOINT = \"http://localhost:8080\";\nlet socket;\n\n\nexport default function Chat(props) {\n\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [recentMessages, setRecentMessages] = useState([]);\n    const [user_name, setUsername] = useState('');\n    const [room_Id, setRoomId] = useState('');\n    const  user  = props.location.state.userName;\n    const  room  = props.location.state.room;\n    const roomName = useParams().name\n    console.log(roomName)\n\n\n    useEffect(() => {\n      socket = io(ENDPOINT);\n      setUsername(user);\n      socket.emit('join',{user_name, roomName});\n\n    }, [user, user_name, room, roomName]);\n    \n    useEffect(()=> {\n      if(roomName) {\n        Axios.get(`http://localhost:8080/user/${roomName}`)\n        .then(res => {\n          if(res) {\n            console.log(res)\n             setRoomId(res.data.existingUser._id)\n            //let roomId = res.data.existingUser._id;\n            //setRoomId(roomId)\n  \n          }\n         \n        })\n\n      }\n     \n    }, [roomName]);\n\n    useEffect(() => {\n      socket.on('mostRecentMessages', data => {\n        setRecentMessages(data.messages)\n      })\n    }, [recentMessages])\n\n    useEffect(() => {\n      socket.on('newChatMessage', message => {\n        setMessages(prevMessages => [ ...prevMessages, message ]);\n      });\n    }, [])\n  \n    console.log(room_Id)\n    const handleChatInput = (event) => {\n      event.persist();\n      setMessage({\n        [event.target.name]: event.target.value,\n        username: user_name,\n        roomId: room_Id\n      });\n    }\n\n\n    const sendMessage = (event) => {\n      event.preventDefault();\n      if(message) {\n        socket.emit('send-message',  message);\n      } \n    }\n    \n      return(\n        <div>\n        <div className=\"chat-messages\">\n            <div className=\"chat-messages-show-container\">\n            <ul className=\"chat-messages-show-list\" id=\"message-list\">\n               \n                 </ul>\n              \n                <ul className=\"chat-messages-show-list\" id=\"message-list\">\n                {messages && messages.map(msg => {\n                 return <li>{msg.user_name} :  { msg.message_text} </li>\n\n                \n              }\n                )\n      \n                }\n                 </ul>\n               \n                    \n            </div>\n            <div className=\"chat-messages-create-container\"> \n                <input name=\"message\"      \n                    onChange={handleChatInput} className=\"chat-messages-create-input\" type=\"text\" />\n                <button type=\"submit\"  className=\"chat-messages-create-button\" onClick={e => sendMessage(e)} > Send </button>\n            </div>\n        </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}