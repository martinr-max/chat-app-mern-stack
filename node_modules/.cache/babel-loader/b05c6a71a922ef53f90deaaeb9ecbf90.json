{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/martinraba/Desktop/chat-app/src/chat/chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useCallback, useMemo } from 'react';\nimport SocketContext from '../../context/socketContext';\nimport './Chat.css';\nexport default function Chat(props) {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [recentMessages, setRecentMessages] = useState([]);\n  const [user_name, setUsername] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const socket = useContext(SocketContext);\n  const [loggedIn, setLoggedIn] = useState('');\n  const user = props.location.state.userName;\n  const room = props.location.state.room;\n  useEffect(() => {\n    setUsername(user);\n    setRoomName(room);\n    socket.emit('join', user_name, roomName);\n  }, [user, user_name, room, roomName, socket]);\n  useEffect(() => {\n    socket.on('broadcast', data => {\n      setLoggedIn(data.message_text);\n    });\n  }, [user, user_name, room, roomName, socket]);\n  useEffect(() => {\n    socket.on('mostRecentMessages', data => {\n      setRecentMessages(data);\n    });\n  }, [recentMessages, socket]);\n  useEffect(() => {\n    socket.on('newChatMessage', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n  }, [socket]);\n\n  const handleChatInput = event => {\n    event.persist();\n    setMessage({\n      [event.target.name]: event.target.value,\n      username: user_name,\n      room: roomName\n    });\n  };\n\n  const sendMessage = useMemo(message => {\n    if (message) {\n      socket.emit('send-message', message);\n      console.log(message);\n    }\n  }, [socket]);\n  useEffect(() => {\n    sendMessage(message);\n  }, [sendMessage, message]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" \", loggedIn, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-show-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages-show-list\",\n          id: \"message-list\",\n          children: recentMessages && recentMessages.map(msg => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [msg.username, \":  \", msg.message, \" \"]\n            }, msg._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages-show-list\",\n          id: \"message-list\",\n          children: messages && messages.map(msg => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [msg.user_name, \":  \", msg.message_text, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages-create-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"message\",\n          onChange: handleChatInput,\n          className: \"chat-messages-create-input\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"chat-messages-create-button\",\n          onClick: e => sendMessage(e),\n          children: \" Send \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"LS7srm636dKpkepwiOYhORtuuhM=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/martinraba/Desktop/chat-app/src/chat/chat/Chat.js"],"names":["React","useState","useEffect","useContext","useCallback","useMemo","SocketContext","Chat","props","message","setMessage","messages","setMessages","recentMessages","setRecentMessages","user_name","setUsername","roomName","setRoomName","socket","loggedIn","setLoggedIn","user","location","state","userName","room","emit","on","data","message_text","prevMessages","handleChatInput","event","persist","target","name","value","username","sendMessage","console","log","map","msg","_id","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useCallback, useMemo } from 'react';\nimport SocketContext from '../../context/socketContext';\nimport './Chat.css';\n\n\nexport default function Chat(props) {\n\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [recentMessages, setRecentMessages] = useState([]);\n    const [user_name, setUsername] = useState('');\n    const [roomName, setRoomName] = useState('');\n\n    const socket = useContext(SocketContext)\n  \n    const [loggedIn, setLoggedIn] = useState('');\n    const  user  = props.location.state.userName;\n    const  room  = props.location.state.room;\n\n\n    useEffect(() => {\n      setUsername(user);\n      setRoomName(room);\n      socket.emit('join', user_name, roomName);\n\n    }, [user, user_name, room, roomName, socket]);\n\n\n\n    useEffect(() => {\n\n      socket.on('broadcast', data => {\n        setLoggedIn(data.message_text)\n      });\n             \n\n\n    }, [user, user_name, room, roomName, socket]);\n   \n   \n\n \n    useEffect(() => {\n      socket.on('mostRecentMessages', data => {\n        setRecentMessages(data)\n      })\n      \n    \n    }, [recentMessages, socket])\n\n    useEffect(() => {\n      socket.on('newChatMessage', message => {\n        setMessages(prevMessages => [ ...prevMessages, message ]);\n\n\n      });\n      \n    }, [socket])\n  \n\n    const handleChatInput = (event) => {\n      event.persist();\n      setMessage({\n        [event.target.name]: event.target.value,\n        username: user_name,\n        room: roomName,\n      });\n    }\n\n    const sendMessage = useMemo ((message) => {\n\n      if(message) {\n        socket.emit('send-message',  message);\n        console.log(message)\n\n      }\n     \n       \n    }, [ socket])\n\n    useEffect(() => {\n      sendMessage(message)\n    }, [sendMessage, message])\n\n    \n    \n      return(\n        <div>\n          <h3> {loggedIn} </h3>\n         \n        <div className=\"chat-messages\">\n            <div className=\"chat-messages-show-container\">\n             \n               \n                <ul className=\"chat-messages-show-list\" id=\"message-list\">\n                {recentMessages && recentMessages.map(msg => {\n                          \n                          return<li key={msg._id}>{msg.username}:  {msg.message} </li>\n                         \n          \n                        })}\n                 </ul>\n\n                <ul className=\"chat-messages-show-list\" id=\"message-list\">\n                {messages && messages.map(msg => {\n                          \n                          return<li >{msg.user_name}:  {msg.message_text} </li>\n                         \n          \n                        })}\n                 </ul>\n               \n               \n               \n            </div>\n            <div className=\"chat-messages-create-container\"> \n                <input name=\"message\"      \n                    onChange={handleChatInput} className=\"chat-messages-create-input\" type=\"text\" />\n                <button type=\"submit\"  className=\"chat-messages-create-button\" onClick={e => sendMessage(e)} > Send </button>\n            </div>\n        </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}