{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/martinraba/Desktop/chat-app/src/chat/chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport ChatForm from '../ChatForm/ChatForm';\nconst ENDPOINT = io(\"http://localhost:8080\");\nexport default function Chat() {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  let socket = useRef(0);\n  useEffect(() => {\n    const establishSocketConnection = async () => {\n      try {\n        socket.current = await io(ENDPOINT);\n      } catch (error) {\n        alert(`Something went wrong; Can't connect to socket server`);\n      }\n    };\n\n    establishSocketConnection();\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('send-Message', message, () => setMessage(''));\n    }\n  };\n\n  const handleChatInput = event => {\n    event.persist();\n    setMessage({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ChatForm, {\n      message: message,\n      setMessage: setMessage,\n      handleChatInput: handleChatInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"Lr9AJ1jP8YIUVrwDLebBzyaU07w=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/martinraba/Desktop/chat-app/src/chat/chat/Chat.js"],"names":["React","useState","useEffect","useRef","io","ChatForm","ENDPOINT","Chat","message","setMessage","messages","setMessages","socket","establishSocketConnection","current","error","alert","sendMessage","event","preventDefault","emit","handleChatInput","persist","target","name","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAOC,QAAP,MAAqB,sBAArB;AAEA,MAAMC,QAAQ,GAAGF,EAAE,CAAC,uBAAD,CAAnB;AAGA,eAAe,SAASG,IAAT,GAAgB;AAAA;;AAE3B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAIW,MAAM,GAAGT,MAAM,CAAC,CAAD,CAAnB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMW,yBAAyB,GAAG,YAAY;AAC5C,UAAI;AACAD,QAAAA,MAAM,CAACE,OAAP,GAAiB,MAAMV,EAAE,CAACE,QAAD,CAAzB;AACH,OAFD,CAEE,OAAOS,KAAP,EAAc;AACZC,QAAAA,KAAK,CAAE,sDAAF,CAAL;AACH;AACJ,KANC;;AAOFH,IAAAA,yBAAyB;AAExB,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMI,WAAW,GAAIC,KAAD,IAAW;AAC7BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGX,OAAH,EAAY;AACVI,MAAAA,MAAM,CAACQ,IAAP,CAAY,cAAZ,EAA4BZ,OAA5B,EAAqC,MAAMC,UAAU,CAAC,EAAD,CAArD;AACD;AACF,GAND;;AAUA,QAAMY,eAAe,GAAIH,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACI,OAAN;AACAb,IAAAA,UAAU,CAAC;AACT,OAACS,KAAK,CAACK,MAAN,CAAaC,IAAd,GAAqBN,KAAK,CAACK,MAAN,CAAaE;AADzB,KAAD,CAAV;AAGD,GALH;;AASA,sBACI;AAAA,2BACI,QAAC,QAAD;AACC,MAAA,OAAO,EAAEjB,OADV;AAEC,MAAA,UAAU,EAAEC,UAFb;AAGC,MAAA,eAAe,EAAEY;AAHlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA9CuBd,I;;KAAAA,I","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport io from 'socket.io-client';\nimport ChatForm from '../ChatForm/ChatForm';\n\nconst ENDPOINT = io(\"http://localhost:8080\");\n\n\nexport default function Chat() {\n\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    let socket = useRef(0);\n\n    useEffect(() => {\n      \n      const establishSocketConnection = async () => {\n        try {\n            socket.current = await io(ENDPOINT);\n        } catch (error) {\n            alert(`Something went wrong; Can't connect to socket server`);\n        }\n    }\n    establishSocketConnection();\n\n    }, [])\n\n    const sendMessage = (event) => {\n      event.preventDefault();\n  \n      if(message) {\n        socket.emit('send-Message', message, () => setMessage(''));\n      }\n    }\n\n    \n\n    const handleChatInput = (event) => {\n        event.persist();\n        setMessage({\n          [event.target.name]: event.target.value\n        });\n      }\n\n    \n     \n    return(\n        <div>\n            <ChatForm\n             message={message}\n             setMessage={setMessage}\n             handleChatInput={handleChatInput} />\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}