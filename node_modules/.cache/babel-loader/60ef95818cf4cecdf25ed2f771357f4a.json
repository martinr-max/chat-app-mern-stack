{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/martinraba/Desktop/chat-app/src/chat/pages/chat/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport SocketContext from '../../../context/socketContext';\nimport Container from '@material-ui/core/Container';\nimport './Chat.css';\nimport { Grid } from '@material-ui/core';\nimport RecentMessages from '../../components/RecentMessages/RecentMessages';\nimport CurrentMessages from '../../components/currentMessages/CurrentMessages';\nexport default function Chat(props) {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [recentMessages, setRecentMessages] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [user_name, setUsername] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const [userAvatar, setUserAvatar] = useState('');\n  const socket = useContext(SocketContext);\n  const [loggedIn, setLoggedIn] = useState('');\n  const user = props.location.state.userName;\n  const room = props.location.state.room;\n  const avatar = props.location.state.avatar;\n  useEffect(() => {\n    setUsername(user);\n    setRoomName(room);\n    setUserAvatar(avatar);\n    socket.emit('join', user_name, roomName);\n  }, [user, user_name, room, roomName, socket, avatar]);\n  useEffect(() => {\n    socket.on('broadcast', data => {\n      setLoggedIn(data.message_text);\n    });\n  }, [user, user_name, room, roomName, socket]);\n  useEffect(() => {\n    socket.on('mostRecentMessages', data => {\n      setRecentMessages(data);\n    });\n  }, [recentMessages, socket]);\n  useEffect(() => {\n    socket.on('usersInRoom', users => {\n      setUsers(users);\n    });\n  }, [socket]);\n  useEffect(() => {\n    socket.on('newChatMessage', message => {\n      setMessages(prevMessages => [...prevMessages, message]);\n    });\n  }, [socket]);\n\n  const handleChatInput = event => {\n    setMessage({\n      [event.target.name]: event.target.value,\n      username: user_name,\n      avatar: userAvatar,\n      room: roomName\n    });\n  };\n\n  let sendMessage = useRef();\n  let disconnectU = useRef();\n  useEffect(() => {\n    sendMessage.current = () => {\n      socket.emit('send-message', roomName, message);\n    };\n  }, [socket, message, roomName]);\n  useEffect(() => {\n    disconnectU.current = async () => {\n      socket.emit('leave', roomName, user_name);\n    };\n  }, [socket, user_name, roomName]);\n  useEffect(() => {\n    window.onunload = async () => {\n      socket.emit('leave', roomName, user_name);\n    };\n  }, [socket, roomName, user_name]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      id: \"top-row\",\n      container: true,\n      item: true,\n      xl: 12,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        className: \"userList\",\n        item: 3,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \" Users in room \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: users && users.map((user, index) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\" \", user.username, \" \"]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xl: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\" \", loggedIn, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `http://localhost:8000/${avatar}`,\n            alt: avatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: disconnectU.current,\n              children: \" Log out \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-messages-show-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-messages-show-list\",\n              id: \"message-list\",\n              children: /*#__PURE__*/_jsxDEV(RecentMessages, {\n                recentMessages: recentMessages,\n                user_name: user_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"chat-messages-show-list\",\n              id: \"message-list\",\n              children: /*#__PURE__*/_jsxDEV(CurrentMessages, {\n                messages: messages,\n                user_name: user_name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-messages-create-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"message\",\n              onChange: handleChatInput,\n              className: \"chat-messages-create-input\",\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"chat-messages-create-button\",\n              onClick: e => sendMessage.current(),\n              children: \" Send \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Chat, \"SG0fvd0jbvhi+b/TxLFiKmD8BvM=\");\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/martinraba/Desktop/chat-app/src/chat/pages/chat/Chat.js"],"names":["React","useState","useEffect","useContext","useRef","SocketContext","Container","Grid","RecentMessages","CurrentMessages","Chat","props","message","setMessage","messages","setMessages","recentMessages","setRecentMessages","users","setUsers","user_name","setUsername","roomName","setRoomName","userAvatar","setUserAvatar","socket","loggedIn","setLoggedIn","user","location","state","userName","room","avatar","emit","on","data","message_text","prevMessages","handleChatInput","event","target","name","value","username","sendMessage","disconnectU","current","window","onunload","map","index","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react';\nimport SocketContext from '../../../context/socketContext';\nimport Container from '@material-ui/core/Container';\nimport './Chat.css';\nimport { Grid } from '@material-ui/core';\nimport RecentMessages from '../../components/RecentMessages/RecentMessages';\nimport CurrentMessages from '../../components/currentMessages/CurrentMessages';\n\n\nexport default function Chat(props) {\n\n    const [message, setMessage] = useState('');\n    const [messages, setMessages] = useState([]);\n    const [recentMessages, setRecentMessages] = useState([]);\n    const [users, setUsers] =useState([])\n    const [user_name, setUsername] = useState('');\n    const [roomName, setRoomName] = useState('');\n    const [userAvatar, setUserAvatar] = useState('');\n\n\n    const socket = useContext(SocketContext)\n  \n    const [loggedIn, setLoggedIn] = useState('');\n    const  user  = props.location.state.userName;\n    const  room  = props.location.state.room;\n    const  avatar = props.location.state.avatar;\n\n\n\n\n    useEffect(() => {\n      setUsername(user);\n      setRoomName(room);\n      setUserAvatar(avatar);\n      socket.emit('join', user_name, roomName);\n    }, [user, user_name, room, roomName, socket, avatar]);\n\n\n\n\n    useEffect(() => {\n\n      socket.on('broadcast', data => {\n        setLoggedIn(data.message_text)\n      });\n             \n\n\n    }, [user, user_name, room, roomName, socket]);\n   \n   \n\n \n    useEffect(() => {\n      socket.on('mostRecentMessages', data => {\n        setRecentMessages(data)\n      })\n      \n    \n    }, [recentMessages, socket])\n\n    useEffect(() => {\n      socket.on('usersInRoom', users => {\n        setUsers(users);\n      })\n      \n    \n    }, [ socket])\n\n\n    useEffect(() => {\n      socket.on('newChatMessage', message => {\n        setMessages(prevMessages => [ ...prevMessages, message ]);\n\n\n      });\n      \n    }, [socket])\n  \n\n    const handleChatInput = (event) => {\n      setMessage({\n        [event.target.name]: event.target.value,\n        username: user_name,\n        avatar: userAvatar,\n        room: roomName,\n      });\n    }\n\n\n    let sendMessage = useRef();\n    let disconnectU = useRef();\n\n    useEffect(() => {\n        sendMessage.current = () => {\n        socket.emit('send-message',roomName, message)\n      }  \n    },[socket, message, roomName])\n\n    useEffect(() => { \n      disconnectU.current = async () => {\n        socket.emit('leave',roomName, user_name);\n      }\n      \n     \n    },[socket, user_name, roomName])\n\n    useEffect(() => {\n      window.onunload = async() => {\n        socket.emit('leave',roomName, user_name);\n        \n      }\n\n    }, [socket, roomName, user_name])\n\n  \n    return(\n        <Container>\n          <Grid id=\"top-row\" container item xl={12}>\n            <Grid className=\"userList\" item ={3}>\n              <h3> Users in room </h3>\n            <ul>\n            {users && users.map((user, index) => {\n              return <li key={index}> {user.username} </li>  \n            }) }    \n            </ul>\n            </Grid>\n          <Grid item xl={6}>\n            <h3> {loggedIn} </h3>\n            <div >\n              <img src={`http://localhost:8000/${avatar}`} alt={avatar} ></img>\n              <div>\n                <button onClick={disconnectU.current}> Log out </button>\n              </div>\n              <div className=\"chat-messages-show-container\"  >\n                <div className=\"chat-messages-show-list\" id=\"message-list\"   >\n                      <RecentMessages recentMessages={recentMessages} user_name={user_name} />\n                 </div>\n                <div className=\"chat-messages-show-list\" id=\"message-list\" >\n                      <CurrentMessages messages={messages} user_name={user_name} />\n                </div>   \n            </div>\n            <div className=\"chat-messages-create-container\"> \n                <input name=\"message\"      \n                    onChange={handleChatInput}\n                    className=\"chat-messages-create-input\"\n                    type=\"text\" />\n                <button\n                  type=\"submit\"\n                  className=\"chat-messages-create-button\"\n                  onClick={e => sendMessage.current()} > Send </button>\n            </div>\n        </div>\n        </Grid>\n        </Grid>\n      </Container>\n    );\n}"]},"metadata":{},"sourceType":"module"}